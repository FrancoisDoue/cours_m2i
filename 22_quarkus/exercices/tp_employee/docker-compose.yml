networks:
  app-network:
  kong-net:

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1  # Image Docker pour Zookeeper version 7.0.1, utilisée pour la coordination entre les nœuds Kafka
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181  # Port sur lequel Zookeeper écoute les connexions des clients
      ZOOKEEPER_TICK_TIME: 2000  # Intervalle de temps utilisé par Zookeeper pour ses propres opérations internes, exprimé en millisecondes
    ports:
      - "2181:2181"
    networks:
      - app-network

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:7.0.1
    ports:
      - "9092:9092"
    expose:
      - "29092"
      - "9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    depends_on:
      - zookeeper
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    networks:
      - app-network

  init-kafka:
    container_name: init-kafka
    image: confluentinc/cp-kafka:7.0.1
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: [ "/bin/sh", "-c" ]
    command: |
      "echo -e '- - - - - - - - - Creating kafka topics: - - - - - - - - -' 
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic ${KAFKA_DEPARTMENT_PRODUCER} --partitions 1 --replication-factor 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic ${KAFKA_ORGANIZATION_PRODUCER} --partitions 1 --replication-factor 1      
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic ${KAFKA_EMPLOYEE_PRODUCER} --partitions 1 --replication-factor 1
      echo -e '- - - - Successfully created the following topics: - - - -'
      kafka-topics --bootstrap-server kafka:29092 --list"
    networks:
      - app-network

  department-service:
    container_name: department-service
    build:
      context: ./department-service
      dockerfile: ./Dockerfile
    restart: on-failure
    environment:
      PORT: 8080
      EMPLOYEE_SERVICE_URL: http://employee-service:8080
      ORGANIZATION_SERVICE_URL: http://organization-service:8080
      KAFKA_ORGANIZATION_PRODUCER: ${KAFKA_ORGANIZATION_PRODUCER}
      KAFKA_EMPLOYEE_PRODUCER: ${KAFKA_EMPLOYEE_PRODUCER}
      KAFKA_BROKER_SERVER: kafka:9092
    ports:
      - ${DEPARTMENT_SERVICE_PORT}:8080
    depends_on:
      init-kafka:
        condition: service_completed_successfully
    networks:
      - app-network

  employee-service:
    container_name: employee-service
    build:
      context: ./employee-service
      dockerfile: ./Dockerfile
    restart: on-failure
    environment:
      PORT: 8080
      DEPARTMENT_SERVICE_URL: http://department-service:8080
      ORGANIZATION_SERVICE_URL: http://organization-service:8080
      KAFKA_ORGANIZATION_PRODUCER: ${KAFKA_ORGANIZATION_PRODUCER}
      KAFKA_DEPARTMENT_PRODUCER: ${KAFKA_DEPARTMENT_PRODUCER}
      KAFKA_EMPLOYEE_PRODUCER: ${KAFKA_EMPLOYEE_PRODUCER}
      KAFKA_BROKER_SERVER: kafka:9092
    ports:
      - ${EMPLOYEE_SERVICE_PORT}:8080
    depends_on:
      init-kafka:
        condition: service_completed_successfully
    networks:
      - app-network

  organization-service:
    container_name: organization-service
    build:
      context: ./organization-service
      dockerfile: ./Dockerfile
    restart: on-failure
    environment:
      PORT: 8080
      EMPLOYEE_SERVICE_URL: http://employee-service:8080
      KAFKA_ORGANIZATION_PRODUCER: ${KAFKA_ORGANIZATION_PRODUCER}
      KAFKA_EMPLOYEE_PRODUCER: ${KAFKA_EMPLOYEE_PRODUCER}
      KAFKA_BROKER_SERVER: kafka:9092
    ports:
      - ${ORGANIZATION_SERVICE_PORT}:8080
    depends_on:
      init-kafka:
        condition: service_completed_successfully
    networks:
      - app-network

  kong-database:
    image: postgres:latest
    container_name: kong-database
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    networks:
      - kong-net
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "kong" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  kong-migrations:
    image: kong:latest
    restart: on-failure
    command: "kong migrations bootstrap"
    container_name: kong-migrations
    networks:
      - kong-net
    depends_on:
      kong-database:
        condition: service_healthy
      kong:
        condition: service_started
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong

  kong:
    image: kong:latest
    restart: on-failure
    container_name: kong-gateway
    depends_on:
      kong-database:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    networks:
      - kong-net
      - app-network

#  init-kong:
#    image: alpine/curl
#    container_name: init-kong
#    restart: on-failure
#    depends_on:
#      - kong
#