version: '3'
networks:
  kong-net:

services:
  kong-database:
    container_name: kong-database
    image: postgres:latest
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    networks:
      - kong-net
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "kong" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kong:
    image: kong:latest
    container_name: kong
    restart: on-failure
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_PORT: 5432
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    networks:
      - kong-net
    depends_on:
      kong-database:
        condition: service_healthy
      kong-init:
        condition: service_started

  kong-init:
    image: kong:latest
    command: "kong migrations bootstrap"
    container_name: kong-init
    restart: on-failure # Makes sure the container is not restarted unless there was a failure
    networks:
      - kong-net
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
      - KONG_PG_PORT=5432
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kong
      - KONG_PG_DATABASE=kong
    depends_on:
      - kong-database

# curl -i -X --data name=order-service --dat